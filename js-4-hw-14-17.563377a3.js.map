{"mappings":"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","sources":["<anon>","src/s.js"],"sourcesContent":["var $5615b62810517221$exports = {};\n// TASK 1 - COUNTRY SEARCH\nconst $5615b62810517221$var$countryInput = document.getElementById(\"countryInput\");\nconst $5615b62810517221$var$results = document.getElementById(\"results\");\nconst $5615b62810517221$var$searchBtn = document.getElementById(\"searchBtn\");\nfunction $5615b62810517221$var$renderCountryList(countries) {\n    $5615b62810517221$var$results.innerHTML = countries.map((c)=>`<li>${c.name.common}</li>`).join(\"\");\n}\nfunction $5615b62810517221$var$renderCountryDetails(country) {\n    const languages = Object.values(country.languages || {}).join(\", \");\n    $5615b62810517221$var$results.innerHTML = `\n    <li>\n      <h2>${country.name.common}</h2>\n      <p>Capital: ${country.capital ? country.capital[0] : \"N/A\"}</p>\n      <p>Population: ${country.population.toLocaleString()}</p>\n      <p>Languages: ${languages}</p>\n      <img src=\"${country.flags.svg}\" alt=\"Flag of ${country.name.common}\" width=\"150\" />\n    </li>`;\n}\nfunction $5615b62810517221$var$notify(message) {\n    alert(message);\n}\nasync function $5615b62810517221$var$fetchCountries() {\n    const query = $5615b62810517221$var$countryInput.value.trim();\n    if (!query) {\n        $5615b62810517221$var$results.innerHTML = \"\";\n        return;\n    }\n    try {\n        const res = await fetch(`https://restcountries.com/v3.1/name/${query}`);\n        if (!res.ok) throw new Error(\"Countries not found\");\n        const data = await res.json();\n        if (data.length > 10) {\n            $5615b62810517221$var$results.innerHTML = \"\";\n            $5615b62810517221$var$notify(\"Too many results. Please enter a more specific query.\");\n        } else if (data.length > 1) $5615b62810517221$var$renderCountryList(data);\n        else if (data.length === 1) $5615b62810517221$var$renderCountryDetails(data[0]);\n    } catch (e) {\n        $5615b62810517221$var$results.innerHTML = \"\";\n        $5615b62810517221$var$notify(\"Countries not found or server error.\");\n    }\n}\n$5615b62810517221$var$searchBtn.addEventListener(\"click\", $5615b62810517221$var$fetchCountries);\n// TASK 2 - CATS\nconst $5615b62810517221$var$catResults = document.getElementById(\"catResults\");\nconst $5615b62810517221$var$catLoadMore = document.getElementById(\"catLoadMore\");\nlet $5615b62810517221$var$catPage = 1;\nconst $5615b62810517221$var$catLimit = 4;\nconst $5615b62810517221$var$catApiKey = \"live_MbqbGmV1SsALeirOBY5Mt36UjMlvxDqG1RtzxSk0DAmOMH9zS7A8ehMiZBHNstnA\";\nasync function $5615b62810517221$var$loadCats() {\n    try {\n        const res = await fetch(`https://api.thecatapi.com/v1/images/search?limit=${$5615b62810517221$var$catLimit}&page=${$5615b62810517221$var$catPage}&order=Desc&category_ids=1`, {\n            headers: {\n                \"x-api-key\": $5615b62810517221$var$catApiKey\n            }\n        });\n        const data = await res.json();\n        if (data.length === 0) {\n            $5615b62810517221$var$catLoadMore.disabled = true;\n            return;\n        }\n        const markup = data.map((cat)=>`<img src=\"${cat.url}\" alt=\"Cat\" loading=\"lazy\" />`).join(\"\");\n        $5615b62810517221$var$catResults.insertAdjacentHTML(\"beforeend\", markup);\n        $5615b62810517221$var$catPage++;\n    } catch  {\n        alert(\"Error loading cats\");\n    }\n}\n$5615b62810517221$var$catLoadMore.addEventListener(\"click\", $5615b62810517221$var$loadCats);\n$5615b62810517221$var$loadCats(); // initial load\n// TASK 3 - POSTS\nconst $5615b62810517221$var$ghUsers = document.querySelector(\".githubUsers\");\nconst $5615b62810517221$var$seePostBtn = document.querySelector(\".seePost\");\nlet $5615b62810517221$var$postLimit = 5;\nfunction $5615b62810517221$var$makePostsMarkup(posts) {\n    return posts.map((p)=>`<li><h3>${p.title}</h3><p>${p.body}</p></li>`).join(\"\");\n}\n$5615b62810517221$var$seePostBtn.addEventListener(\"click\", async ()=>{\n    $5615b62810517221$var$postLimit += 5;\n    try {\n        const res = await fetch(`https://jsonplaceholder.typicode.com/posts?_limit=${$5615b62810517221$var$postLimit}`);\n        const data = await res.json();\n        $5615b62810517221$var$ghUsers.innerHTML = $5615b62810517221$var$makePostsMarkup(data);\n    } catch  {\n        alert(\"Error loading posts\");\n    }\n});\n(async ()=>{\n    const res = await fetch(`https://jsonplaceholder.typicode.com/posts?_limit=5`);\n    const data = await res.json();\n    $5615b62810517221$var$ghUsers.innerHTML = $5615b62810517221$var$makePostsMarkup(data);\n})();\n\n\n//# sourceMappingURL=js-4-hw-14-17.563377a3.js.map\n","// TASK 1 - COUNTRY SEARCH\n\nconst countryInput = document.getElementById(\"countryInput\");\nconst results = document.getElementById(\"results\");\nconst searchBtn = document.getElementById(\"searchBtn\");\n\nfunction renderCountryList(countries) {\n  results.innerHTML = countries\n    .map((c) => `<li>${c.name.common}</li>`)\n    .join(\"\");\n}\n\nfunction renderCountryDetails(country) {\n  const languages = Object.values(country.languages || {}).join(\", \");\n  results.innerHTML = `\n    <li>\n      <h2>${country.name.common}</h2>\n      <p>Capital: ${country.capital ? country.capital[0] : \"N/A\"}</p>\n      <p>Population: ${country.population.toLocaleString()}</p>\n      <p>Languages: ${languages}</p>\n      <img src=\"${country.flags.svg}\" alt=\"Flag of ${\n    country.name.common\n  }\" width=\"150\" />\n    </li>`;\n}\n\nfunction notify(message) {\n  alert(message);\n}\n\nasync function fetchCountries() {\n  const query = countryInput.value.trim();\n  if (!query) {\n    results.innerHTML = \"\";\n    return;\n  }\n  try {\n    const res = await fetch(`https://restcountries.com/v3.1/name/${query}`);\n    if (!res.ok) throw new Error(\"Countries not found\");\n    const data = await res.json();\n\n    if (data.length > 10) {\n      results.innerHTML = \"\";\n      notify(\"Too many results. Please enter a more specific query.\");\n    } else if (data.length > 1) {\n      renderCountryList(data);\n    } else if (data.length === 1) {\n      renderCountryDetails(data[0]);\n    }\n  } catch (e) {\n    results.innerHTML = \"\";\n    notify(\"Countries not found or server error.\");\n  }\n}\n\nsearchBtn.addEventListener(\"click\", fetchCountries);\n\n// TASK 2 - CATS\n\nconst catResults = document.getElementById(\"catResults\");\nconst catLoadMore = document.getElementById(\"catLoadMore\");\n\nlet catPage = 1;\nconst catLimit = 4;\nconst catApiKey =\n  \"live_MbqbGmV1SsALeirOBY5Mt36UjMlvxDqG1RtzxSk0DAmOMH9zS7A8ehMiZBHNstnA\";\n\nasync function loadCats() {\n  try {\n    const res = await fetch(\n      `https://api.thecatapi.com/v1/images/search?limit=${catLimit}&page=${catPage}&order=Desc&category_ids=1`,\n      {\n        headers: { \"x-api-key\": catApiKey },\n      }\n    );\n    const data = await res.json();\n    if (data.length === 0) {\n      catLoadMore.disabled = true;\n      return;\n    }\n    const markup = data\n      .map((cat) => `<img src=\"${cat.url}\" alt=\"Cat\" loading=\"lazy\" />`)\n      .join(\"\");\n    catResults.insertAdjacentHTML(\"beforeend\", markup);\n    catPage++;\n  } catch {\n    alert(\"Error loading cats\");\n  }\n}\n\ncatLoadMore.addEventListener(\"click\", loadCats);\nloadCats(); // initial load\n\n// TASK 3 - POSTS\n\nconst ghUsers = document.querySelector(\".githubUsers\");\nconst seePostBtn = document.querySelector(\".seePost\");\nlet postLimit = 5;\n\nfunction makePostsMarkup(posts) {\n  return posts\n    .map((p) => `<li><h3>${p.title}</h3><p>${p.body}</p></li>`)\n    .join(\"\");\n}\n\nseePostBtn.addEventListener(\"click\", async () => {\n  postLimit += 5;\n  try {\n    const res = await fetch(\n      `https://jsonplaceholder.typicode.com/posts?_limit=${postLimit}`\n    );\n    const data = await res.json();\n    ghUsers.innerHTML = makePostsMarkup(data);\n  } catch {\n    alert(\"Error loading posts\");\n  }\n});\n\n(async () => {\n  const res = await fetch(\n    `https://jsonplaceholder.typicode.com/posts?_limit=5`\n  );\n  const data = await res.json();\n  ghUsers.innerHTML = makePostsMarkup(data);\n})();\n"],"names":["$5615b62810517221$var$countryInput","document","getElementById","$5615b62810517221$var$results","$5615b62810517221$var$searchBtn","$5615b62810517221$var$fetchCountries","query","value","trim","innerHTML","res","fetch","ok","Error","data","json","length","alert","countries","map","c","name","common","join","$5615b62810517221$var$renderCountryDetails","country","languages","Object","values","capital","population","toLocaleString","flags","svg","e","addEventListener","$5615b62810517221$var$catResults","$5615b62810517221$var$catLoadMore","$5615b62810517221$var$catPage","$5615b62810517221$var$loadCats","headers","disabled","markup","cat","url","insertAdjacentHTML","$5615b62810517221$var$ghUsers","querySelector","$5615b62810517221$var$seePostBtn","$5615b62810517221$var$postLimit","$5615b62810517221$var$makePostsMarkup","posts","p","title","body"],"version":3,"file":"js-4-hw-14-17.563377a3.js.map"}